import time
import traceback
import telebot
from telebot import types  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
from telebot.types import LabeledPrice, ShippingOption
from collections import defaultdict
from sber_payments import Client

from object import *
from config import *

bot = telebot.TeleBot(Api_bot_tg)
provider_token = Token_Sber

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–º–µ–º–µ–Ω–Ω—ã–µ ==================================================================================
str_done_order = "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑  üåä"
selected_product = [] #—Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
global products

prev_select_product = '' #–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
price_all = 0 #—Ü–µ–Ω–∞
# ==========================================================================================================

# –ê–¥–º–∏–Ω–∫–∞ –∏ —Å—Ç–∞—Ä—Ç –°—Ç–∞—Ä—Ç ====================================================================================

# A function that processes the /start command
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    manager = UserManager(conn)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç session
    manager.register_user(user_id=user_id, username=username, first_name=first_name, role_user="user_role")  # –í–∫–ª—é—á–∞–µ–º user_id

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_order = types.KeyboardButton(str_done_order)
    markup.add(button_order)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, '–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –°–∫–æ—Ä–µ–µ –∑–∞–∫–∞–∑—ã–≤–∞–π –∫–æ—Ñ–µ\n–í —Å–ª—É—á–∞–µ —á–µ–≥–æ –ø–∏—à–∏ —Å—Ä–∞–∑—É /help!', reply_markup=markup)

@bot.message_handler(commands=["admin"])
def admin_login(message):
    manager = UserManager(conn)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç sessio
    
    if manager.check_admin_role(message.from_user.id):

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_create_pdf = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å PDF —Ñ–∞–π–ª")
        button_another_option = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å JSON")
        button_exit = types.KeyboardButton("–í—ã—Ö–æ–¥")

        markup.add(button_create_pdf, button_another_option, button_exit)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(message.chat.id, '–ß—Ç–æ –¥–µ–ª–∞–µ–º?', reply_markup=markup)
    else:
        bot.send_message(message.chat.id,'–¢—ã –ù–ï –∞–¥–º–∏–Ω')

@bot.message_handler(commands=["help"])
def help(message):
    message_user = '/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è(–ü—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)\n/help - –í—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏\n/list - –í–µ—Å—å –∫–æ—Ñ–µ\n'
    bot.send_message(message.chat.id, message_user, reply_markup=types.ReplyKeyboardRemove())
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    
@bot.message_handler(commands=["list"])
def list_func(message):
    global products
    markup = types.InlineKeyboardMarkup(row_width=1)

    message_user = '–°–ø–∏—Å–æ–∫ –∫–æ—Ñ–µ ‚òïÔ∏è:\n'
    
    managerProduct = ProductManager(conn)
    products = managerProduct.get_list()

    for product in products:
        button = types.InlineKeyboardButton(text=f'{product.id_product}: {product.price}‚ÇΩ\n–û—Å—Ç–∞—Ç–æ–∫: {product.count} —É–ø.',
                                            callback_data=f'product_{product.id_product}')
        markup.add(button)
    button = types.InlineKeyboardButton(text=f'–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–∫–∞–∑ ‚úÖ',callback_data=f'finish')
    markup.add(button)
    message_user += '\n(–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞ –∑–∞ –æ–¥–Ω—É —É–ø–∞–∫–æ–≤–∫—É)'
    
    bot.send_message(message.chat.id, message_user, reply_markup=markup)
    


# –ê–¥–º–∏–Ω–∫–∞ –∏ —Å—Ç–∞—Ä—Ç –ö–æ–Ω–µ—Ü ====================================================================================
@bot.message_handler(func=lambda message: message.text == str_done_order)
def make_order(message):

    global selected_product, products

    managerProduct = ProductManager(conn)
    products = managerProduct.get_list()

    markup = types.InlineKeyboardMarkup(row_width=1)

    message_user = '–°–ø–∏—Å–æ–∫ –∫–æ—Ñ–µ ‚òïÔ∏è:\n'

    for product in products:
        button = types.InlineKeyboardButton(text=f'{product.id_product}: {product.price}‚ÇΩ\n–û—Å—Ç–∞—Ç–æ–∫: {product.count} —É–ø.',
                                            callback_data=f'product_{product.id_product}')
        markup.add(button)
    
    button = types.InlineKeyboardButton(text=f'–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–∫–∞–∑ ‚úÖ',callback_data=f'finish')

    markup.add(button)
    message_user += '\n(–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞ –∑–∞ –æ–¥–Ω—É —É–ø–∞–∫–æ–≤–∫—É)'
    
    bot.send_message(message.chat.id, message_user, reply_markup=markup)

def create_str_output_user(selected_products_func):
    formatted_strings = []

    for product in selected_products_func:
        formatted_string = f"{product['data']}: {product['count']} —É–ø."
        formatted_strings.append(formatted_string)

    selected_product_cleaned = '\n'.join(formatted_strings)
    return selected_product_cleaned

@bot.callback_query_handler(func=lambda call: call.data == 'finish') #–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
def finish_order(call):
        global selected_product, price_all
        selected_product_cleaned = create_str_output_user(selected_product)
        if (price_all > 0):
            bot.send_message(call.message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑:\n" + selected_product_cleaned + "\n–û–±—â–∞—è —Å—É–º–º–∞: " + str(price_all) + "‚ÇΩ")

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_yes = types.KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å üí≥")
            #button_another_option = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ü§∑")
            button_exit = types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå")

            markup.add(button_yes, button_exit)
            bot.send_message(call.message.chat.id, "–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ üòî")

# —ç—Ç–∞ –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ callback –∏ –∑–∞–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.
@bot.callback_query_handler(func=lambda call: call.data.startswith('product_'))
def handle_product_selection(call):
    global selected_product, prev_select_product

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ callback_data
    product_id = call.data.replace('product_', '')
    prev_select_product = product_id

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=types.ReplyKeyboardRemove())

def group_objects(selected_product_func):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º defaultdict –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    grouped_products = defaultdict(lambda: {'data': '', 'count': 0, 'price': 0.0})

    for product in selected_product_func:
        key = product['data']
        grouped_products[key]['data'] = product['data']
        grouped_products[key]['count'] += product['count']
        grouped_products[key]['price'] += product['price']

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    grouped_product_list = list(grouped_products.values())

    result_list = []

    for product in grouped_product_list:
        result_list.append({"data": product['data'], "count": product['count'], "price": product['price']})

    return result_list

# –£–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_quantity_selection(message):
    global selected_product, prev_select_product, price_all, products
     # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    managerProduct = ProductManager(conn)
      # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products = managerProduct.get_list()
# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    quantity_str = message.text.strip()

     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
    if quantity_str:
        try: # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            quantity = int(quantity_str)
            # –ú–µ–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            for product in products:
                if product.id_product == prev_select_product:
                    old_count_data = product.count 
                    product.count -= quantity
                    if (product.count < 0):
                        #products = managerProduct.get_list()
                        product.count = old_count_data # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
                         # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                        products = managerProduct.get_list()
                        bot.send_message(message.chat.id, f'–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª-–≤–æ –∑–µ—Ä–Ω–∞ ({quantity}) –∏–º–µ–µ—Ç—Å—è: {old_count_data}.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–¥ –æ—Å—Ç–∞—Ç–æ–∫')
                        return make_order(message)
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            price = managerProduct.get_price(prev_select_product)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
            price_all += quantity * price

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫ —Å—Ç—Ä–æ–∫–µ –∑–∞–∫–∞–∑–∞
            selected_product.append({"data": prev_select_product, "count": quantity, "price": quantity * price})

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            grouped_selected_product = group_objects(selected_product)
            # # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {quantity} —É–ø. {prev_select_product}.\n–ï—â–µ —á—Ç–æ-—Ç–æü§î')

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π selected_product
            selected_product = grouped_selected_product
              # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞
            make_order(message)
        except ValueError:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int –Ω–µ —É–¥–∞–ª–æ—Å—å
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞')
    else: # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå")
def order_exit(message):
    global selected_product, price_all, products
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥
    for selected_item in selected_product:
        product_id = selected_item['data']
        quantity = selected_item['count']
        for product in products:
            if product.id_product == product_id:
                product.count += quantity
                break
    
    # –û–±–Ω—É–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å—É–º–º—É
    selected_product = []
    price_all = 0
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    managerProduct = ProductManager(conn)
      # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products = managerProduct.get_list()
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_order = types.KeyboardButton(str_done_order)
    markup.add(button_order)
    
    bot.send_message(message.chat.id, '–ê –∫–∞–∫ –∂–µ –∫–æ—Ñ–∏–∏? ü•∫\n', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–∫–∞–∑–∞
@bot.message_handler(func=lambda message: message.text == "–í—ã—Ö–æ–¥ üö™")
def exit(message):
    bot.send_message(message.chat.id,'–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –Ω–∞—à —Å–∞–π—Ç!\nhttps://www.surfcoffee.ru/')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_order = types.KeyboardButton(str_done_order)
    markup.add(button_order)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, '–¢—ã —Å–Ω–æ–≤–∞ —Å –Ω–∞–º–∏! –†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
@bot.message_handler(func=lambda message: message.text == "–û–ø–ª–∞—Ç–∏—Ç—å üí≥")
def pay_order(message):
    global selected_product
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ (–∑–¥–µ—Å—å —É–∫–∞–∑–∞–Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –∫–æ—Ñ–µ–π–Ω—ã–µ –∑–µ—Ä–Ω–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫—É)
    prices = [LabeledPrice(label='–ö–æ—Ñ–µ–π–Ω—ã–µ –∑–µ—Ä–Ω–∞', amount=int(100 * price_all)), LabeledPrice('–î–æ—Å—Ç–∞–≤–∫–∞', 10000)]
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    bot.send_invoice(
                        message.chat.id,  #chat_id
                        '–ö–æ—Ñ–µ–π–Ω—ã–µ –∑–µ—Ä–Ω–∞', #title
                        '–ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∏—Ä –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ —Å Surf Coffee! –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—Ñ–µ–π–Ω—ã—Ö –∑–µ—Ä–µ–Ω —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞. ', #invoice_payload
                         'HAPPY FRIDAYS COUPON', #invoice_payload
                        provider_token, #provider_token
                        'rub', #currency
                        prices, #prices
                        photo_url='https://34.img.avito.st/image/1/27TeIba_d12ohIVb5D6cpEuCcVdgQnOvbIJ1W2aEdV1qxA',
                        photo_height=512,  # !=0/None or picture won't be shown
                        photo_width=512,
                        photo_size=512,
                        is_flexible=False,  # True If you need to set up Shipping Fee
                        start_parameter='time-machine-example')  
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤  
    managerProduct = ProductManager(conn)
     # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    for product in products:
        managerProduct.update_product_count(product.id_product, product.count)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_order = types.KeyboardButton(str_done_order)
    markup.add(button_order)

    bot.send_message(message.chat.id, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∑–∞–∫–∞–∑–∞ –µ–¥–µ—Ç –∫ –≤–∞–º!',reply_markup=markup)

# –ö–æ–¥ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ–π—Å–≤—Ç–∏–≤–∏—Ç–µ–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É –±–µ–∑ —Ç–µ—Å—Ç api
# @bot.pre_checkout_query_handler(func=lambda query: True)
# def checkout(pre_checkout_query):
#     bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
#                                   error_message="Aliens tried to steal your card's CVV, but we successfully protected your credentials,"
#                                                 " try to pay again in a few minutes, we need a small rest.")


# @bot.message_handler(content_types=['successful_payment'])
# def got_payment(message):
#     bot.send_message(message.chat.id,
#                      'Hoooooray! Thanks for payment! We will proceed your order for `{} {}` as fast as possible! '
#                      'Stay in touch.\n\nUse /buy again to get a Time Machine for your friend!'.format(
#                          message.successful_payment.total_amount / 100, message.successful_payment.currency),
#                      parse_mode='Markdown')

#–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –±–æ—Ç –Ω–∞—á–Ω–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã Telegram 
#–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, 
#–∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º 
bot.infinity_polling(skip_pending = True) 

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def start_bot():
    try: # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
        print("Bot started")
        bot.polling(none_stop=True, interval=0) # –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram 
    except Exception as e: # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏
        traceback_error_string = traceback.format_exc()
        with open("Error.Log", "a") as myfile: # –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª "Error.Log"
            myfile.write("\r\n\r\n" + time.strftime("%c") + "\r\n<<ERROR polling>>\r\n" + str(e) + "\r\n" + traceback_error_string + "\r\n<<ERROR polling>>")
        bot.stop_polling() # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
        time.sleep(15) # –ü–∞—É–∑–∞ –Ω–∞ 15 —Å–µ–∫—É–Ω–¥
        start_bot() # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã


# Start Bot
if __name__ == "__main__":
    start_bot()
